// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
package yb.tserver;

option java_package = "org.yb.tserver";

import "yb/tserver/tserver.proto";
import "yb/tablet/metadata.proto";

service TabletServerService {
  rpc Write(WriteRequestPB) returns (WriteResponsePB);
  rpc Read(ReadRequestPB) returns (ReadResponsePB);
  rpc Scan(ScanRequestPB) returns (ScanResponsePB);
  rpc NoOp(NoOpRequestPB) returns (NoOpResponsePB);
  rpc ScannerKeepAlive(ScannerKeepAliveRequestPB) returns (ScannerKeepAliveResponsePB);
  rpc ListTablets(ListTabletsRequestPB) returns (ListTabletsResponsePB);
  rpc GetLogLocation(GetLogLocationRequestPB) returns (GetLogLocationResponsePB);

  // Run full-scan data checksum on a tablet to verify data integrity.
  //
  // TODO: Consider refactoring this as a scan that runs a checksum aggregation
  // function.
  rpc Checksum(ChecksumRequestPB)
      returns (ChecksumResponsePB);

  rpc ListTabletsForTabletServer(ListTabletsForTabletServerRequestPB)
      returns (ListTabletsForTabletServerResponsePB);

  rpc ImportData(ImportDataRequestPB) returns (ImportDataResponsePB);
  rpc UpdateTransaction(UpdateTransactionRequestPB) returns (UpdateTransactionResponsePB);
  rpc GetTransactionStatus(GetTransactionStatusRequestPB) returns (GetTransactionStatusResponsePB);
  rpc AbortTransaction(AbortTransactionRequestPB) returns (AbortTransactionResponsePB);
}

message GetLogLocationRequestPB {
}

message GetLogLocationResponsePB {
  optional string log_location = 1;
}

message ChecksumRequestPB {
  // Only one of 'new_request' or 'continue_request' should be specified.
  optional NewScanRequestPB new_request = 1;
  optional ContinueChecksumRequestPB continue_request = 2;

  // See documentation for ScanRequestPB for info about these fields.
  optional uint32 call_seq_id = 3;
  optional uint32 batch_size_bytes = 4;
  optional bool close_scanner = 5;
}

message ContinueChecksumRequestPB {
  // Scanner ID returned from a previous request.
  required bytes scanner_id = 1;

  // Checksum returned from a previous request.
  required uint64 previous_checksum = 2;
}

message ChecksumResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  // The (possibly partial) checksum of the tablet data.
  // This checksum is only complete if 'has_more_results' is false.
  optional uint64 checksum = 2;

  // See documentation for ScanResponsePB for info about these fields.
  optional bytes scanner_id = 3;
  optional bool has_more_results = 4;
  optional fixed64 snap_hybrid_time = 5;
}

message ListTabletsForTabletServerRequestPB {
}

message ListTabletsForTabletServerResponsePB {
  // An entry for each tablet.
  message Entry {
    optional string table_name = 1;
    optional bytes tablet_id = 2;
    optional bool is_leader = 3;
    optional tablet.TabletStatePB state = 4;
  }

  repeated Entry entries = 1;
}

message ImportDataRequestPB {
  optional string tablet_id = 1;
  optional string source_dir = 2;
}

message ImportDataResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;
}

message UpdateTransactionRequestPB {
  optional bytes tablet_id = 1;
  optional TransactionStatePB state = 2;
}

message UpdateTransactionResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;
}

message GetTransactionStatusRequestPB {
  optional bytes tablet_id = 1;
  optional bytes transaction_id = 2;
}

message GetTransactionStatusResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  optional TransactionStatus status = 2;
  optional fixed64 status_hybrid_time = 3;
}

message AbortTransactionRequestPB {
  optional bytes tablet_id = 1;
  optional bytes transaction_id = 2;
}

message AbortTransactionResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  optional TransactionStatus status = 2;
}
