// Copyright (c) YugaByte, Inc.

package yb;

option java_package = "org.yb";

import "yb/common/common.proto";

// This is an internal protocol for communicating YSQL operations from a YB client to a tserver.
//
// Reference:
// Cassandra SQL doc - https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlCommandsTOC.html
// Usage notes - https://docs.google.com/document/d/1q9i7a9X5rDdTC0q8hNAqo9i9NyDh0n_Fhm5vdzmtBEw

// A YSQL value
message YSQLValuePB {
  // Note: UINT8, UINT16, UINT32, UINT64, and BINARY are not supported.
  optional DataType datatype = 1;
  // Note: an absent value means NULL
  oneof value {
    int32 int8_value = 2;  // Note: min int size in protobuf is int32
    int32 int16_value = 3;
    int32 int32_value = 4;
    int64 int64_value = 5;
    float float_value = 6;
    double double_value = 7;
    string string_value = 8;
    bool bool_value = 9;
    int64 timestamp_value = 10;
  }
}

// A column value
message YSQLColumnValuePB {
  optional int32 column_id = 1;
  optional YSQLValuePB value = 2;
}

// An expression in a WHERE condition
message YSQLExpressionPB {
  oneof expr {
    YSQLValuePB value = 1;
    int32 column_id = 2;
    YSQLConditionPB condition = 3;
  }
}

// Condition operators
enum YSQLOperator {
  YSQL_OP_NOOP = 0;

  // Operators that take one operand.
  YSQL_OP_NOT = 1;
  YSQL_OP_IS_NULL = 2;
  YSQL_OP_IS_NOT_NULL = 3;
  YSQL_OP_IS_TRUE = 4;
  YSQL_OP_IS_FALSE = 5;

  // Operators that take two operands.
  YSQL_OP_EQUAL = 6;
  YSQL_OP_LESS_THAN = 7;
  YSQL_OP_LESS_THAN_EQUAL = 8;
  YSQL_OP_GREATER_THAN = 9;
  YSQL_OP_GREATER_THAN_EQUAL = 10;
  YSQL_OP_NOT_EQUAL = 11;

  YSQL_OP_AND = 12;
  YSQL_OP_OR = 13;
  YSQL_OP_LIKE = 14;
  YSQL_OP_NOT_LIKE = 15;
  YSQL_OP_IN = 16;
  YSQL_OP_NOT_IN = 17;

  // Operators that take three operands.
  YSQL_OP_BETWEEN = 18;
  YSQL_OP_NOT_BETWEEN = 19;
}

// A logical condition that evaluates to true/false. Used in the WHERE clause.
message YSQLConditionPB {
  optional YSQLOperator op = 1;
  repeated YSQLExpressionPB operands = 2;
}

// Client type: only CQL client is supported currently
enum YSQLClient {
  YSQL_CLIENT_CQL = 1;
}

//-------------------------------------- Write request ---------------------------------------

message YSQLWriteRequestPB {

  // Statement types
  enum YSQLStmtType {
    YSQL_STMT_INSERT = 1;
    YSQL_STMT_UPDATE = 2;
    YSQL_STMT_DELETE = 3;
  }

  // If conditions
  enum YSQLIf {
    YSQL_IF_EXISTS = 1;
    YSQL_IF_NOT_EXISTS = 2;
  }

  // Statement type
  optional YSQLStmtType type = 1; // required

  // Client info
  optional YSQLClient client = 2; // required
  optional uint64 request_id = 3; // client request id - for debug tracing purpose only

  // Table schema version
  optional uint32 schema_version = 4; // required

  // Primary key of the row to insert/update/delete - all fields required. The hashed and
  // range column values must be in the same order as the column order in the table schema.
  //
  // Note: the hash_code is the hash of the hashed_column_values. Technically, this can be
  // recomputed by tserver also, but since the client already calculates this to look up the
  // correct tablet server, it is passed in.
  optional uint32 hash_code = 5;
  repeated YSQLColumnValuePB hashed_column_values = 6;
  repeated YSQLColumnValuePB range_column_values = 7;

  // Column values to insert/update/delete - required
  // Note: DELETE statement has no column value.
  repeated YSQLColumnValuePB column_values = 8;

  // IF conditions:
  // - insert: NOT_EXISTS
  // - update: EXISTS or NOT_EXISTS
  // - delete: EXISTS
  optional YSQLIf if = 9;

  // TTL: a 32-bit int (max value = 20 years in secs per org/apache/cassandra/cql3/Attributes.java)
  optional uint32 ttl = 10;
}

//-------------------------------------- Read request ----------------------------------------

message YSQLReadRequestPB {

  // Client info
  optional YSQLClient client = 1; // required
  optional uint64 request_id = 2; // client request id - for debug tracing purpose only

  // Table schema version
  optional uint32 schema_version = 3; // required

  // Hashed key of row(s) to read - all fields required. The hashed column values must be in the
  // same order as the column order in the table schema.
  optional uint32 hash_code = 4;
  repeated YSQLColumnValuePB hashed_column_values = 5;

  // Where clause condition
  optional YSQLConditionPB condition = 6;

  // Column ids to read (select)
  repeated int32 column_ids = 7; // required

  // Order-by column id
  optional int32 order_by_column_id = 8;

  // Limit number of rows to return
  optional uint32 limit = 9;
}

//------------------------------ Response (for both read and write) -----------------------------

message YSQLResponsePB {

  // Response status
  enum YSQLStatus {
    YSQL_STATUS_OK = 0;
    YSQL_STATUS_SCHEMA_VERSION_MISMATCH = 1;
    YSQL_STATUS_RUNTIME_ERROR = 2;
  }

  // Status and error message
  optional YSQLStatus status = 1 [ default = YSQL_STATUS_OK ]; // required
  optional string error_message = 2;

  // For write requests with an if-clause, whether the write has been applied successfully.
  optional bool applied = 3;

  // Sidecar of rows data returned
  optional int32 rows_data_sidecar = 5;
}
